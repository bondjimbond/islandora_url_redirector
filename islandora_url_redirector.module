<?php

/**
 * @file
 * The main islandora_url_redirector module file.
 */

/**
 * Implements hook_menu().
 */
function islandora_url_redirector_menu() {
  $items['admin/islandora/tools/urlredirect'] = array(
    'title' => 'Islandora URL Redirector',
    'description' => 'Configure Islandora URL Redirector.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_url_redirector_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

// Splits the URL snippets from admin form into an array, semicolon delimited 
  $snippets = variable_get('islandora_url_redirector_path_snippet', '');
  $snippets = explode(';',$snippets);

  foreach ($snippets as $snippet) {
    $snippet = $snippet . "/%";
    $items[$snippet] = array(
      'access callback' => TRUE,
      'page callback' => 'islandora_url_redirector_id',
      'page arguments' => array('islandora_url_redirector_admin_settings'),
      'type' => MENU_CALLBACK,
    );
  }
  
  return $items;
}

/**
 * Admin settings form builder.
*/

function islandora_url_redirector_admin_settings() {
  global $base_url;

  $form['islandora_url_redirector_path_snippet'] = array(
    '#title' => t('Old path snippet'),
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => variable_get('islandora_url_redirector_path_snippet'),
    '#description' => t('URL pattern to trigger an identifier lookup. Add all non-unique patterns.'),
    '#maxlength' => 255,
  );

  $form['islandora_url_redirector_solr_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Old URL Solr field'),
    '#size' => 60,
    '#default_value' => variable_get('islandora_url_redirector_solr_field', 'dc.identifier'),
    '#description' => t('Solr field containing the old permanent URL.'),
    '#maxlength' => 255,
  );
  
  $form['islandora_url_redirector_base'] = array(
    '#type' => 'textfield',
    '#title' => t('New hostname base URL'),
    '#size' => 60,
    '#default_value' => variable_get('islandora_url_redirector_base', $base_url),
    '#description' => t('Your new repository base URL'),
    '#maxlength' => 255,
  );

  $form['islandora_url_redirector_solr_base'] = array(
    '#type' => 'textfield',
    '#title' => t('Solr base URL'),
    '#size' => 60,
    '#default_value' => variable_get('islandora_url_redirector_solr_base', 'http://localhost:8080/solr'),
    '#description' => t('Solr URL for the new repository.'),
    '#maxlength' => 255,
  );

  $form['islandora_url_redirector_old_base'] = array(
    '#type' => 'textfield',
    '#title' => t('Old host base URL'),
    '#size' => 60,
    '#default_value' => variable_get('islandora_url_redirector_old_base', $base_url),
    '#description' => t('Your old repository base URL. This is appended to the Snippets defined above. Leave blank if using full URLs in Snippets.'),
    '#maxlength' => 255,
  );

  return system_settings_form($form);
}
 




/**
 * Intercept the incoming URL, run Solr query, and find the PID
 */

function islandora_url_redirector_id() {
  global $base_url;
  $path = request_path();
  $oldbase = variable_get('islandora_url_redirector_old_base', $base_url);

  // Check if an old base URL is set. If not, search only the snippet. If so, add base URL to path and search entire URL.
  if($oldbase !='') {
    $path = $oldbase . "/" . $path;
  }
  
// Calls the Solr query function, passing the incoming path to it.
  $pid = islandora_url_redirector_query_solr($path);
  $url = variable_get('islandora_url_redirector_base', $base_url);
  $target_url = $url . "/islandora/object/" . $pid;

  drupal_goto($target_url);

}


/**
 * Queries Islandora's Solr index using the config-defined identifier field, compares incoming path.
 *
 */

function islandora_url_redirector_query_solr($input) {
  $solr_url = variable_get('islandora_url_redirector_solr_base','http://localhost:8080/solr');
  
  $field = "dc.identifier";
  $query = $solr_url . '/select?version=1.2&wt=json&json.nl=map&q=' .
  $field . ':%22' . $input . '%22';
  $raw_result = drupal_http_request($query);
  if ($raw_result->code != 200) {
    return FALSE;
  }
  $query_result = json_decode($raw_result->data);
  if ($query_result->response->numFound < 1) {
    return FALSE;
  }
  // The query should only find one object, but if it finds more than one,
  // take the first one.
  return $query_result->response->docs[0]->PID;
}
